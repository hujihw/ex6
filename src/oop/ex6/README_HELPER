Q' IN SECTION 6.3:
in general we found breaking down long regex to small strings very helpful both in code repetition reduction and
extensibility. we used string concatenation for that matter (the first String is the one we used and the second one is
 the concatenation result (brought here only for RexEg explanation- without java escape backslash).

String CALL_METHOD = "\\A\\s*(" + METHOD_NAME + ")\\s*\\(\\s*((" + VARIABLE_VALUE_OR_NAME +
            "(\\s*,\\s*" + VARIABLE_VALUE_OR_NAME + "\\s*)*" + ")|)\\)\\s*;\\s*\\z";


                     "\A\s*([a-zA-Z]\w*)\s*\(\s*(((true|false|".*"|'.'|-?\d+(\.\d+)?|_?[a-zA-Z]\w*)
            (\s*,\s*(true|false|".*"|'.'|-?\d+(\.\d+)?|_?[a-zA-Z]\w*)\s*)*)|)\)\s*;\s*\z"

explanation:
this regex matches the method call line expression as a whole.
we used in all of the "whole line match" RegEx's the \A \z bounders and also parentheses for grouping.
first we look for the method name which can include digits, letters and "_" but must start with a letter.
in the (double escaped) parentheses we look for a variable value or a variable name which can appear more that one with
a "," followed. the variable value can be true/false/string/char/int/double. a variable name can't start with a digit,
can start with "_" but must follow with any digit char or letter. the end of the line must be ";" (assuming all of the
parts can include zero or more white spaces).


String ASSIGN_VARIABLE = "\\A\\s*(" + VARIABLE_NAME + ")\\s*=\\s*" + VARIABLE_VALUE_OR_NAME +
            "\\s*;\\s*\\z";

            \A\s*(_?[a-zA-Z]\w*)\s*=\s*(true|false|".*"|'.'|-?\d+(\.\d+)?|_?[a-zA-Z]\w*)
            \s*;\s*\z

explanation:
this regex matches the variable assignment expression as a whole.
we used in all of the "whole line match" RegEx's the \A \z bounders and also parentheses for grouping.
first we look for the variable name which is described above (the previous regex).
then after a "=" char, we look for a variable value or a variable name which are also described above.
and in the end of the line  must be ";" (assuming all of the parts can include zero or more white spaces).
